// <auto-generated />
using System;
using Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace backend.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20211214204924_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Backend.Entities.Availability", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("userid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Backend.Entities.Clinic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Medicid")
                        .HasColumnType("integer");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("menager_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("specializationid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Medicid");

                    b.HasIndex("specializationid");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("Backend.Entities.Specialization", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Medicid")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Medicid");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Backend.Entities.Visit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("patientid")
                        .HasColumnType("integer");

                    b.Property<int?>("receptionistid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("workingTimeid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("patientid");

                    b.HasIndex("receptionistid");

                    b.HasIndex("workingTimeid");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Backend.Entities.WorkingTime", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("clinicid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("userid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("clinicid");

                    b.HasIndex("userid");

                    b.ToTable("WorkingTimes");
                });

            modelBuilder.Entity("Backend.Entities.Medic", b =>
                {
                    b.HasBaseType("Backend.Entities.User");

                    b.HasDiscriminator().HasValue("Medic");
                });

            modelBuilder.Entity("Backend.Entities.Patient", b =>
                {
                    b.HasBaseType("Backend.Entities.User");

                    b.Property<string>("insuranceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Backend.Entities.Receptionist", b =>
                {
                    b.HasBaseType("Backend.Entities.User");

                    b.Property<int?>("clinicid")
                        .HasColumnType("integer");

                    b.HasIndex("clinicid");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Backend.Entities.Availability", b =>
                {
                    b.HasOne("Backend.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Entities.Clinic", b =>
                {
                    b.HasOne("Backend.Entities.Medic", null)
                        .WithMany("clinics")
                        .HasForeignKey("Medicid");

                    b.HasOne("Backend.Entities.Specialization", "specialization")
                        .WithMany()
                        .HasForeignKey("specializationid");

                    b.Navigation("specialization");
                });

            modelBuilder.Entity("Backend.Entities.Specialization", b =>
                {
                    b.HasOne("Backend.Entities.Medic", null)
                        .WithMany("specializations")
                        .HasForeignKey("Medicid");
                });

            modelBuilder.Entity("Backend.Entities.Visit", b =>
                {
                    b.HasOne("Backend.Entities.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientid");

                    b.HasOne("Backend.Entities.Receptionist", "receptionist")
                        .WithMany()
                        .HasForeignKey("receptionistid");

                    b.HasOne("Backend.Entities.WorkingTime", "workingTime")
                        .WithMany()
                        .HasForeignKey("workingTimeid");

                    b.Navigation("patient");

                    b.Navigation("receptionist");

                    b.Navigation("workingTime");
                });

            modelBuilder.Entity("Backend.Entities.WorkingTime", b =>
                {
                    b.HasOne("Backend.Entities.Clinic", "clinic")
                        .WithMany()
                        .HasForeignKey("clinicid");

                    b.HasOne("Backend.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userid");

                    b.Navigation("clinic");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Entities.Receptionist", b =>
                {
                    b.HasOne("Backend.Entities.Clinic", "clinic")
                        .WithMany()
                        .HasForeignKey("clinicid");

                    b.Navigation("clinic");
                });

            modelBuilder.Entity("Backend.Entities.Medic", b =>
                {
                    b.Navigation("clinics");

                    b.Navigation("specializations");
                });
#pragma warning restore 612, 618
        }
    }
}
